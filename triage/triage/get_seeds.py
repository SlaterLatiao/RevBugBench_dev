import os
import re
import logging

from common.confighelper import ConfigHelper
from utils.common import CORPUS_QUEUE_STORE, CORPUS_CRASH_STORE


# Returns seeds organized by trial.
def get_seeds(seed_type: str, helper: ConfigHelper) -> list:
    logging.info('extracting seeds from FuzzBench results')
    seeds = []
    # TODO: Make `corpus_store` configurable to ease the trouble of extending more fuzzers.
    corpus_store = CORPUS_QUEUE_STORE if seed_type == 'queue' else CORPUS_CRASH_STORE
    for benchmark in helper.benchmarks():
        for fuzzer in helper.fuzzers():
            for trial in helper.trials(benchmark, fuzzer):
                queues = corpus_store[fuzzer]
                trial_seeds = []
                for queue in queues:
                    queue_dir = os.path.join(helper.trial_data_dir(benchmark, fuzzer, trial), queue)
                    if not os.path.exists(queue_dir):
                        logging.warning(f'{benchmark}-{fuzzer}-{trial}: queue directory does not exist {queue_dir}')
                        continue
                    for seed_name in os.listdir(queue_dir):
                        file_path = os.path.join(queue_dir, seed_name)
                        # TODO: Make following checks configurable.
                        if seed_name == 'README.txt' or os.path.isdir(file_path):
                            continue
                        if fuzzer == 'libfuzzer' and seed_type == 'crash' \
                                and not seed_name.startswith('oom') and not seed_name.startswith('crash'):
                            continue
        
                        seed = {'path': file_path, 'type': seed_type,
                                'benchmark': benchmark, 'fuzzer': fuzzer,
                                'trial': trial}
                        trial_seeds.append(seed)
                        time_match = re.search(fr'time:(\d+)', seed_name)
                        if time_match:
                            if fuzzer == 'aflplusplus':
                                seed['time'] = int(time_match.group(1)) / 1000
                            else:
                                logging.error(f'unsupported time in seed name with fuzzer {fuzzer}')
                                exit(0)
                        else:
                            # Using mtime to represent the seed generation time. It may be inaccurate.
                            seed['mtime'] = os.path.getmtime(file_path)
                        id_match = re.search(fr'id:(\d+)', seed_name)
                        # Re-index seeds generated by fuzzers with multiple queues.
                        if id_match and len(queues) == 1:
                            seed['id'] = int(id_match.group(1))
                if len(trial_seeds) > 0 and ('id' not in trial_seeds[0] or 'mtime' in trial_seeds[0]):
                    trial_seeds.sort(key=lambda x: x['mtime'])
                    if 'id' not in trial_seeds[0]:
                        for i in range(len(trial_seeds)):
                            trial_seeds[i]['id'] = i
                    if 'mtime' in trial_seeds[0]:
                        init_time = trial_seeds[0]['mtime']
                        for seed in trial_seeds:
                            seed['time'] = seed['mtime'] - init_time
                            # Delete the `mtime` entry.
                            seed.pop('mtime')
                seeds.extend(trial_seeds)
    return seeds
